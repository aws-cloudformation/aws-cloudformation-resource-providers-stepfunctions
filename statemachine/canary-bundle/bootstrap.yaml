Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambaForDataGenerationExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource: !Join ["/", [!GetAtt StepFunctionsS3Bucket.Arn, "*"]]
  StepFunctionsS3Bucket:
    Description: An S3 bucket which will hold JSON and YAML state machine definitions used for canary tests
    Type: "AWS::S3::Bucket"
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  S3PutObjectFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Runtime: "python3.7"
      Timeout: "60"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile:
          !Sub
          - |-
            import boto3
            import cfnresponse

            def lambda_handler(event, context):
                s3 = boto3.resource('s3')
                bucket_name = '${bucket}'
                bucket = s3.Bucket(bucket_name)
                with open('/tmp/hello_world.json', 'w') as fp:
                    fp.write('{\n  "Comment": "A Hello World example of the Amazon States Language using Pass states",\n  "StartAt": "Hello",\n  "States": {\n    "Hello": {\n      "Type": "Pass",\n      "Result": "Hello",\n      "Next": "${!Text}"\n    },\n    "${!Text}": {\n      "Type": "Pass",\n      "Result": "${!Text}",\n      "End": true\n    }\n  }\n}')
                with open('/tmp/hello_world.yaml', 'w') as fp:
                    fp.write('Comment: "A Hello World example of the Amazon States Language using Pass states"\nStartAt: Hello\nStates:\n  Hello:\n    Type: Pass\n    Result: Hello\n    Next: World\n  World:\n    Type: Pass\n    Result: ${!Text}\n    End: true')
                bucket.upload_file('/tmp/hello_world.json', 'hello_world.json')
                bucket.upload_file('/tmp/hello_world.yaml', 'hello_world.yaml')
                responseData = {}
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "S3PutObjectFunctionID")
          - { bucket: !Ref StepFunctionsS3Bucket }
  S3FileCreationResource:
    Type: "Custom::S3PutObject"
    Properties:
      ServiceToken: !GetAtt [ S3PutObjectFunction, Arn ]
  ExpressCWLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 30
  ExpressCWLogRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CWLogPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogDelivery"
                  - "logs:GetLogDelivery"
                  - "logs:UpdateLogDelivery"
                  - "logs:DeleteLogDelivery"
                  - "logs:ListLogDeliveries"
                  - "logs:PutResourcePolicy"
                  - "logs:DescribeResourcePolicies"
                  - "logs:DescribeLogGroups"
                Resource: "*"
Outputs:
  ExpressCWLogGroupArn:
    Value: !GetAtt [ ExpressCWLogGroup, Arn]
    Export:
      Name: "StepFunctionsCanaries-ExpressCWLogGroupArn"
  ExpressCWLogRoleArn:
    Value: !GetAtt [ ExpressCWLogRole, Arn ]
    Export:
      Name: "StepFunctionsCanaries-ExpressCWLogRoleArn"
  StepFunctionsS3BucketName:
    Value: !Ref StepFunctionsS3Bucket
    Export:
      Name: "StepFunctionsCanaries-S3BucketName"
